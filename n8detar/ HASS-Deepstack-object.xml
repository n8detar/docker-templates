<?xml version="1.0"?>
<Container version="2">
  <Name>HASS-Deepstack-object</Name>
  <Repository>deepquestai/deepstack:gpu</Repository>
  <Registry>https://hub.docker.com/r/deepquestai/deepstack</Registry>
  <Network>bridge</Network>
  <MyIP/>
  <Shell>bash</Shell>
  <Privileged>false</Privileged>
  <Support>https://deepquestai.com</Support>
  <Project>https://github.com/robmarkcole/HASS-Deepstack-object</Project>
  <Overview>Home Assistant custom component for Deepstack object detection. Deepstack is a service which runs in a docker container and exposes deep-learning models via a REST API. Deepstack object detection uses Yolo V3 to identify 80 different kinds of objects (listed at bottom of this readme), including people (person) and animals. There is no cost for using Deepstack, although you will need a machine with 8 GB RAM.</Overview>
  <Category>Home Automation: Tools: Status:Stable</Category>
  <WebUI>http://[IP]:[PORT:5000]</WebUI>
  <TemplateURL>https://gitea.campingfamilyfive.com/ndetar/docker-templates/raw/master/ndetar/HASS-Deepstack-object.xml</TemplateURL>
  <Icon>https://deepstack.cc/static/img/deepstacklogo.png</Icon>
  <ExtraParams/>
  <PostArgs/>
  <CPUset/>
  <!-- <DonateText>Donations</DonateText>
  <DonateLink>https://www.linuxserver.io/donate/</DonateLink> -->
  <Description>Home Assistant custom component for Deepstack object detection. Deepstack is a service which runs in a docker container and exposes deep-learning models via a REST API. Deepstack object detection uses Yolo V3 to identify 80 different kinds of objects (listed at bottom of this readme), including people (person) and animals. There is no cost for using Deepstack, although you will need a machine with 8 GB RAM.</Description>
  <Networking>
    <Mode>bridge</Mode>
    <Publish>
      <Port>
        <HostPort></HostPort>
        <ContainerPort>5000</ContainerPort>
        <Protocol>tcp</Protocol>
      </Port>
    </Publish>
  </Networking>
  <Data>
    <Volume>
      <Name>Config Location</Name>
      <HostDir></HostDir>
      <ContainerDir>/datastore</ContainerDir>
      <Mode>rw</Mode>
    </Volume>
  </Data>
  <Environment>
    <Variable>
      <Value/>
      <Name>VISION-DETECTION</Name>
      <Mode/>
    </Variable>
    <Variable>
      <Value/>
      <Name>API-KEY</Name>
      <Mode/>
    </Variable>
    <Variable>
      <Value>99</Value>
      <Name>PUID</Name>
      <Mode/>
    </Variable>
    <Variable>
      <Value>100</Value>
      <Name>PGID</Name>
      <Mode/>
    </Variable>
  </Environment>
  <Labels/>
  <Config Name="Webui" Target="5000" Default="" Mode="tcp" Description="Webui Port - Default 5000" Type="Port" Display="always" Required="true" Mask="false"></Config>
  <Config Name="Config Location" Target="/datastore" Default="" Mode="rw" Description="Config Location - /datastore" Type="Path" Display="always" Required="true" Mask="false"></Config>
  <Config Name="Vision Detection" Target="VISION-DETECTION" Default="" Mode="" Description="VISION-DETECTION" Type="Variable" Display="always" Required="false" Mask="true"/>
  <Config Name="API Key" Target="API-KEY" Default="" Mode="" Description="API-KEY" Type="Variable" Display="always" Required="false" Mask="true"/>  
  <Config Name="PUID" Target="PUID" Default="" Mode="" Description="PUID" Type="Variable" Display="advanced" Required="false" Mask="false">99</Config>
  <Config Name="PGID" Target="PGID" Default="" Mode="" Description="PGID" Type="Variable" Display="advanced" Required="false" Mask="false">100</Config>
</Container>